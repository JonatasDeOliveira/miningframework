# This script receives as input the path to a directory generated by the miningframework, it reads the output files and creates a [output]/data/results-soot.csv with the output in a format suported by a SOOT analysis framework

import sys

CLASS_NAME = "class_name"
LEFT_MODIFICATION = "leftModification"
RIGHT_MODIFICATION = "rightModfication"
COMMIT_SHA = "commitSha"
PROJECT_NAME = "projectName"

output_path = sys.argv[1] # get output path passed as cli argument
def export_csv():
    f = open(output_path + "/data/results.csv", "r")
    file = f.read()
    f.close()

    brute_lines = file.split("\n")

    parsed = parse_output(brute_lines)
    csv = generate_csv(parsed)


def parse_output(lines):
    result = []
    for line in lines[1:]:
        cells = line.split(";")
        if (len (cells) > 1):
            method = {}
            method[PROJECT_NAME] = cells[0]
            method[COMMIT_SHA] = cells[1]
            method[CLASS_NAME] = cells[2]
            method[LEFT_MODIFICATION] = parse_modification(cells[4])
            method[RIGHT_MODIFICATION] = parse_modification(cells[6])
            result.append(method)
    return result

def parse_modification(modifications):
    trimmed_input = modifications.strip("[]").replace(" ", "")
    if (len (trimmed_input) > 0):
        return trimmed_input.split(",")
    return []

def generate_csv(collection):
    for elem in collection:
        result = []
        result_reverse = []
        class_name = elem[CLASS_NAME]
        left_modifications = elem[LEFT_MODIFICATION]
        right_modifications = elem[RIGHT_MODIFICATION]
        for l in left_modifications:
            if l not in right_modifications:
                result_reverse.append(class_name + ",sink," + l)
                result.append(class_name + ",source," + l)
        for r in right_modifications:
            if r not in left_modifications:
                result_reverse.append(class_name + ",source," + r)
                result.append(class_name + ",sink," + r)
        try:
            if result:
                base_path = output_path + "/files/" + elem[PROJECT_NAME] + "/" + elem[COMMIT_SHA]
                save_file(base_path + "/soot.csv", result)
                save_file(base_path + "/soot-reverse.csv", result_reverse)
        except:
            pass

def save_file(filePath, result):
    csv_file = open(filePath, "w")
    csv_file.write("\n".join(result))
    csv_file.close()

export_csv()