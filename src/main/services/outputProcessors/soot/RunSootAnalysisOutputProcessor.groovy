
package services.outputProcessors.soot

import interfaces.OutputProcessor
import util.*

import static app.MiningFramework.arguments

/**
 * @requires: that soot-analysis.jar is in the dependencies folder and that
 * FetchBuildsOutputProcessor and GenerateSootInputFilesOutputProcessor were ran
 * @provides: a [outputPath]/data/soot-results.csv file with the results for the soot algorithms ran
 */
class RunSootAnalysisOutputProcessor implements OutputProcessor {

    private final String RESULTS_FILE_PATH = "/data/results-with-builds.csv"

    private final String[] DETECTION_ALGORITHMS = ["dataflow", "tainted", "svfa"]

    void processOutput () {
        // check if file generated by FetchBuildsOutputProcessor exists
        File resultsWithBuildsFile = new File(arguments.getOutputPath() + RESULTS_FILE_PATH)
        if (resultsWithBuildsFile.exists()) {
            println "Executing RunSootAnalysisOutputProcessor"
            runSootAnalysis()
        }
    }

    private void runSootAnalysis() {
        File sootResultsFile = createOutputFile()
        List<SootScenario> sootScenarios = SootScenario.readScenarios(arguments.getOutputPath() + RESULTS_FILE_PATH);
        
        for (scenario in sootScenarios) {

            println "Running soot scenario ${scenario.getCommitSHA()}"
            String filePath = scenario.getLinesFile(arguments.getOutputPath())
            String filePathReverse = scenario.getLinesFile(arguments.getOutputPath())
            String classPath = scenario.getClassPath(arguments.getOutputPath())

            // check if file generated by GenerateSootInputFilesOutputProcessor exists
            if (new File(filePath).exists()) {
                List<String> results = [];

                for (String algorithm : DETECTION_ALGORITHMS) {

                    String leftRightResult = hasSootFlow(runSootAnalysis(filePath, classPath, algorithm));

                    String rightLeftResult = hasSootFlow(runSootAnalysis(filePathReverse, classPath, algorithm));

                    results.addAll([leftRightResult, rightLeftResult]);
                }

                sootResultsFile << "${scenario.toString()};${results.join(";")}\n"
            }
        }
    }

    private File createOutputFile() {
        File sootResultsFile = new File(arguments.getOutputPath() + "/data/soot-results.csv")

        if (sootResultsFile.exists()) {
            sootResultsFile.delete()
        }

        sootResultsFile << buildCsvHeader();
    
        return sootResultsFile
    }

    private String buildCsvHeader () {
        StringBuilder resultStringBuilder = new StringBuilder("project;class;method;merge commit");

        for (String algorithm : DETECTION_ALGORITHMS) {
            resultStringBuilder.append(";${algorithm} left right");
            resultStringBuilder.append(";${algorithm} right left");
        }
        resultStringBuilder.append("\n");

        return resultStringBuilder.toString();
    }

    private String hasSootFlow (Process sootProcess) {
        String result = "error"

        sootProcess.getInputStream().eachLine {
            println it
            if (it.stripIndent().startsWith("Number of conflicts:")) {
                result = "true"
            } else if (it.stripIndent() == "No conflicts detected") {
                result = "false"
            }
        }
        return result
    }

    private Process runSootAnalysis (String filePath, String classPath, String mode) {
        return ProcessRunner
            .runProcess(".", "java", "-jar" ,"dependencies/soot-analysis.jar", "-csv", filePath, "-cp", classPath, "-mode", mode)
    }
}